## Basics:
---
MongoDB stores records as BSON documents. BSON is a binary serialization for JSON documents and supports 
all the datatypes provided by json, plus a couple more.

Documents are composed of field and value:

```json
{
    name : "sue",
    age  : 26,
    status:"A",
    groups: ["news", "sports"]
    manager:{name: "merlyn"}
}
```
All these documents are stored in collections and collections are stored in a database.

#### Creating a database and collection:
```
use newdb //creates  a database vi name newdb
db.createCollection("col1") // creates a collection via name col1

show collections //list all the collections within db;
```

#### The _id field:
---
Every document has a _id field and it acts as a primary key for the document.
Mongodb automatically creates a unique index on this key.
The "_id" field can have any BSON type as its value, except for array. 

Most popular values to be stored in _id include:
- ObjectID
- Autoincrement values
- UUID
- unique code

#### What is an object ID ?

Object Ids consists of 12 bytes.
- First 4 bytes, contains time.
- Next 3 bytes, machine id
- Next 2 bytes, process id
- Next 3 bytes, counter

#### Mongodb Strings
Mongodb stores string values as UTF-8 by default. 
Thus, can handle all international characters and languages without any settings change.





Mongo Queries:
---

```json
{a:10}
```
Matches docs where a = 10 or a = [12,10,22]

```
{a:10, b: "hello"}
```
Docs where a is 10 and b is hello.

```
{a: {$gt:10}} 
```
Docs where a is greater than 10. 
Use $lt for less than, $gte for greater than equal to, $ne for not equal to.

```
{a:{$in:[10, "hello"]}}
```
Docs where a is 10 or hello.

```
{"a.b": 10}
```
Docs where a is a map (embedded doc), with b equal to 10.

```
{a : {$elemMatch:{$gt:80, $lt:85}}}
```
Docs where a is an array and has atleast one element that is greater than 80 and less than 85.
Sample: {a:[80,56,78,82]}, In this case its a match as "82" is the element we are looking for. 
{a:[80,34,56,78]}, In this case there is no match as none element specifioes the criterion.

```
{a: {$elemMatch:{b:1, c:2}}}
```
Docs where a is an array of embedded docs and atleast one embedded doc has b=1 and c=2.
Sample: {a:[{b:1,c:2,d:3},{b:2,c:2,d:2}]
Will match the first doc.

```
{$or: [{a:1}, {b:2}]}
```
Get all docs where a=1 OR b=2.

```
{a: /^m/}
```
Docs where a has a value that starts with "m"

```
{a: {$mod:[10, 1]}}
```
Docs where a MOD 10 is 1

```
{a:{$type:2}}
```
Docs where a is a string.
Follwoing is the type spec:
1 - Double (integer)
2 - String
3 - Object
4 - Array
5 - ObjectID
6 - Date

